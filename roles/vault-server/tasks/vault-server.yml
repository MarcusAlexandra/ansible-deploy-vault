---
- name: Dowlnoad Vault from HashiCorp
  get_url:
    url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "/tmp/vault_{{ vault_version }}_linux_amd64.zip"
    # checksum: "sha1:a79bb68f0ebe43b8c55d91ac58950e0c44aa0310"

- name: Extract Vault Archive
  unarchive:
    src: "/tmp/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "/usr/bin"
    copy: no

- name: Create Vault Server Dirs
  file:
    path: "{{ item}}"
    state: directory
  with_items:
    - /etc/vault
    - /etc/vault/cfssL
    - /apps/data/vault
    - /apps/data/manifest
    - /var/log/vault

- name: Copy etcd Agent kitchenCI ssh keys
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: 'cfsslCerts/', dest: '/etc/vault/cfssL', owner: 'root', group: 'vault', mode: '0660' }
    - { src: 'resolv.conf', dest: '/etc/resolv.conf', owner: 'root', group: 'vault', mode: '0644' }
  when: ansible_hostname is search('utrutstvault0(1)v')

- name: Copy Vault Server Config Template
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: root
  with_items:
    - { src: 'config-etcd.json', dest: '/etc/vault/config.json', owner: 'root', group: 'root', mode: '0640' }
    #- { src: 'config.json', dest: '/etc/vault/config.json', owner: 'root', group: 'root', mode: '0640' }

- name: service | {{ item }}
  service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - [ 'vault' ]
  tags: vaultService

- name: Modify profile
  lineinfile:
    path: /root/.bash_profile
    line: export VAULT_ADDR="{{ vaultUrl }}:{{ vaultUrlPort }}"
    insertbefore: "^export PATH"

#-------------------------------------------------------------------------------
#
#  Check the Vault Status
#
- name: Check  Vault Status
  shell: vault status -address="{{ vaultUrl }}:{{ vaultUrlPort }}" -format json | jq -r '.sealed'
  ignore_errors: true
  args:
    warn: false
  register: vaultStatus

# TODO
#   Do we need to check if the vault is initialized and elect to initialize it if
#   it hasnt'?
#
- name: Initialize the vault
  shell: vault operator init -key-shares=5 -key-threshold=3 -format json
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  ignore_errors: true
  args:
    warn: true
  when: vaultStatus.stdout == 'true'
  register: vaultInitResult

#-------------------------------------------------------------------------------
# Extend ability to use the mlock syscall without running the process as root to
#   Vault executable.
#
- name: Define Vault Capabilities
  capabilities:
    path: /usr/bin/vault
    capability: cap_ipc_lock+ep
    state: present

- name: Check if initfile exists
  stat:
    path: "/etc/vault/initfile"
  register: statInitFile

- name: Parse output of vault init
  set_fact:
    vaultInitParsed: "{{ vaultInitResult.stdout | from_json }}"
  when:  not statInitFile.stat.exists

- name: Write Vault Values to file
  lineinfile:
    create: yes
    dest: /etc/vault/initfile
    state: present
    line: "{{ vaultInitParsed | to_json }}"
  when:  not statInitFile.stat.exists


- name: Parse Output of vaulUnsealKeys and vaultRootToken
  set_fact:
    vaultRootToken: "{{ vaultInitParsed |json_query('root_token')}}"
    vaultUnsealKeys: "{{ vaultInitParsed |json_query('unseal_keys_hex') }}"
  when:  not statInitFile.stat.exists

- name: Unseal Vault w/unsealKeys
  shell: |
    vault operator unseal "{{ item }}"
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  with_items: "{{ vaultUnsealKeys }}"
  when:  vaultUnsealKeys is defined
  register: unsealVault

- name: Vault login
  shell: |
    vault login "{{ vaultInitParsed |json_query('root_token')}}"
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  when: vaultInitParsed is defined
  register: vaultLogin

- debug:
    msg: "{{ vaultRootToken }}"
  when: vaultRootToken is defined

...
