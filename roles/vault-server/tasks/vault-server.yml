---
- name: set_fact for localhost
  tags: always
  set_fact:
    env: "{{ ansible_hostname.split('utru')[1] }}"
    env0: "{{ ansible_hostname.split('tst')[1] }}"
    local_env: "{{ ansible_hostname.split('utru(tst|dev|qa|prd)') }}"
  when: ansible_hostname is search('utru(tst|dev|qa|prd)')

- debug:
    msg: "Vault Server : {{ env }} {{env0}} HostName is {{ local_env }}"

- assert:
    that:
      - env is search('tst|dev|qa|prd')

- name: Creating vault user group
  group:
    name: "{{ vault_group }}"
  become: no

- name: Creating vault user
  user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    system: yes
    shell: "/sbin/nologin"
    comment: "vault nologin User"
    createhome: "no"
    state: present

- name: Dowlnoad Vault from HashiCorp
  get_url:
    url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "/tmp/vault_{{ vault_version }}_linux_amd64.zip"
    # checksum: "sha1:a79bb68f0ebe43b8c55d91ac58950e0c44aa0310"

- name: Extract Vault Archive
  unarchive:
    src: "/tmp/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "/usr/bin"
    copy: no

- name: Create Vault Server Dirs
  file:
    path: "{{ item}}"
    state: directory
  with_items:
    - /etc/vault
    - /apps/data/vault
    - /var/log/vault

- name: copy Vault Server Configs
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: root
  with_items:
    - { src: 'config.json', dest: '/etc/vault/config.json', owner: 'root', group: 'root', mode: '0640' }

- name: service | {{ item }}
  service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - [ 'vault' ]
  tags: vaultService

- name: Modify profile
  lineinfile:
    path: /root/.bash_profile
    line: export VAULT_ADDR=http://10.13.3.10:8200
    insertbefore: "^export PATH"

#-------------------------------------------------------------------------------
#
#  Check the Vault Status
#
- name: Check Vault Status
  shell: vault status -address=http://10.13.3.10:8200 -format json | jq -r '.initialized'
  ignore_errors: true
  args:
    warn: false
  register: vaultStatus

- name: Initialize the vault
  shell: vault operator init -key-shares=5 -key-threshold=3 -format json
  environment:
    VAULT_ADDR: "http://10.13.3.10:8200"
  ignore_errors: true
  args:
    warn: true
  when: "vaultStatus.stdout != 'true'"
  register: vaultInitResult

- debug:
    msg: "Vault Init Result {{ vaultInitResult }}"


- name: Check Vault Status
  shell: vault status -address=http://10.13.3.10:8200 -format json | jq -r '.initialized'
  ignore_errors: true
  args:
    warn: false
  register: vaultStatus

- debug:
    msg: "{{ vaultStatus.stdout }}"
    # msg: "{{ vaultStatus.stdout.split()[1] }}"

#-------------------------------------------------------------------------------
# Extend ability to use the mlock syscall without running the process as root to
#   Vault executable.
#
- name: Define Vault Capabilities
  capabilities:
    path: /usr/bin/vault
    capability: cap_ipc_lock+ep
    state: present

- name: Parse output of vault init
  set_fact:
    vault_init_parsed: "{{ vaultInitResult.stdout | from_json }}"

- name: Write Vault Values to file
  lineinfile:
    create: yes
    dest: /etc/vault/initfile
    state: present
    line: "{{ vaultInitResult.stdout }}.json"
    # line: "{{ vaultInitParsed | to_json }}"
# - debug:
#     msg: "{{ vault_init_parsed |json_query('unseal_keys_hex')}}"
#
# - debug:
#     msg: "{{ vault_init_parsed |json_query('root_token')}}"

- name: Unseal Vault
  shell: |
    vault operator unseal {{ item }}
  environment:
    VAULT_ADDR: "http://10.13.3.10:8200"
  with_items: "{{ vault_init_parsed |json_query('unseal_keys_hex[*]')}}"

- name: Vault login
  shell: |
    vault login {{ item }}
  environment:
    VAULT_ADDR: "http://10.13.3.10:8200"
  with_items: "{{ vault_init_parsed |json_query('root_token')}}"
  register: vaultLogin

- debug:
    msg: "{{ vaultLogin.changed }}"



...
