---
# 1. Add Users
#    Ex. Add a user for retrieving ansible values
# 2. Add Policy/Capabilities to Users
#    Ex.
#        i.  Allow user to retireve kv's from vault via defined policies
#        ii. Allow user to retrieve versioned kv's from vault based on asserted environments
#            (Ex. tst|dev|qa|prod)

- name: Is Vault Unsealed
  shell: |
     vault status -address="{{ vaultUrl }}:{{ vaultUrlPort }}" -format json | jq -r '.sealed'
  register: vaultSealed

- debug:
    msg: "Task: Is Vault Unsealed: {{ vaultSealed.stdout }}"

- name: Get vaultUnseal RootToken
  shell: |
     vault token lookup -address="{{ vaultUrl }}:{{ vaultUrlPort }}" -format json | jq -r '.data.id'
  ignore_errors: true
  args:
    warn: false
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  when: vaultSealed.stdout == 'false'
  register: rootToken

  become: yes
  become_user: root
  shell: |
    vault audit enable file -address="{{ vaultUrl }}:{{ vaultUrlPort }}" file_path="{{ item }}"
  ignore_errors: true
  args:
    warn: false
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  with_items:
    - /var/log/vault/audit.log
  when: vaultSealed.stdout == 'false'

- name: Enable Vault Audit
  shell: |
    vault audit enable syslog -address="{{ vaultUrl }}:{{ vaultUrlPort }}" tag="vault" facility="AUTH" mode="0600" format="json"
  ignore_errors: true
  args:
    warn: false
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  when: vaultSealed.stdout == 'false'

- name: Enable Auth Methods [userpass approle]
  shell: |
    vault auth enable "{{ item }}"
  ignore_errors: true
  args:
    warn: true
  environment:
    VAULT_ADDR: "{{ vaultUrl }}:{{ vaultUrlPort }}"
  with_items:
    - userpass
    - approle
  register: vaultEnableUserpassAuth

...
